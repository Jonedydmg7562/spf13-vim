 
 
 "set encoding=utf-8
 "set fileencodings=utf-8,gbk,ucs-bom,cp936
 set fileencodings=utf-8,gbk,ucs-bom
 
 
 
" 取消拼写检查（取消红色高亮显示）
set nospell
 
 "在文件最后添加 tags 位置
"set tags=E:/Vis3DAlgorithm/VisLib/project/vis3d/CVis3D/tags
"通用设置方法
"set tags=tags;
"set autochdir

"set tags=./tags;,tags

"自动检索目录
set tags=tags;
set autochdir
 
 " 基于缩进或语法进行代码折叠-windows失效"
set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable 
 
 "打开语法高亮
"syntax on
syntax enable
"set t_Co=256  "windows下设置无效-无法识别
"if !has("gui_running")                                          
"    set t_Co=256                                                
"endif 
 
"使用配色方案
"colorscheme DevC++
"colorscheme solarized
"colorscheme distinguished "号称最受欢迎-注释被高亮
"colorscheme fruity
colorscheme molokai "最经典配色
"colorscheme solarized  "经典・
"像solarized gruvbox molokai"这些就不说了，实在是太出名了就不在这里推荐了


" YCM                                                              
" 允许自动加载.ycm_extra_conf.py，不再提示                         
let g:ycm_confirm_extra_conf=0           
"包含库目录
"let g:ycm_global_ycm_extra_conf = 'path to .ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'                          
" 补全功能在注释中同样有效                                         
let g:ycm_complete_in_comments=1                                   
" 开启tags补全引擎                                                 
let g:ycm_collect_identifiers_from_tags_files=1                    
" 键入第一个字符时就开始列出匹配项                                 
let g:ycm_min_num_of_chars_for_completion=1                        
" YCM相关快捷键，分别是\gl, \gf, \gg                                                    
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>              
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>               
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
 
"打开文件类型检测功能
filetype on
 
"不同文件类型采用不同缩进
filetype indent on
 
"允许使用插件
filetype plugin on
filetype plugin indent on 

"ctrlp
"<Leader>p搜索当前目录下文件
"let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlP'
"<Leader>f搜索MRU文件
nmap <Leader>f :CtrlPMRUFiles<CR>
"<Leader>b显示缓冲区文件，并可通过序号进行跳转
nmap <Leader>b :CtrlPBuffer<CR>
"设置搜索时忽略的文件
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
"let g:ctrlp_working_path_mode = 0 "仅在当前打开文档所在目录"
"let g:ctrlp_working_path_mode = ''"仅限于当前打开目录
let g:ctrlp_working_path_mode = 'ra'"可在根目录搜索"
let g:ctrlp_match_window_bottom = 1
"修改QuickFix窗口显示的最大条目数
let g:ctrlp_max_height = 15
let g:ctrlp_match_window_reversed = 0
"设置MRU最大条目数为500
let g:ctrlp_mruf_max = 500
let g:ctrlp_follow_symlinks = 1
"默认使用全路径搜索，置1后按文件名搜索，准确率会有所提高，可以用<C-d>进行切换
let g:ctrlp_by_filename = 1
"默认不使用正则表达式，置1改为默认使用正则表达式，可以用<C-r>进行切换
let g:ctrlp_regexp = 0
"自定义搜索列表的提示符
let g:ctrlp_line_prefix = '? '

